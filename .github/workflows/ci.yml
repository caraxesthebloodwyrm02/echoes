name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run metrics update daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Pre-commit checks (fast feedback)
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install pre-commit
        run: python -m pip install --upgrade pip pre-commit

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  # Comprehensive testing
  test:
    runs-on: ubuntu-latest
    needs: pre-commit
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry
        run: poetry config virtualenvs.create true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run tests with coverage
        run: |
          poetry run pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: pre-commit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Install privacy scanner dependencies
        run: |
          # Privacy scanner is part of the packages.security module
          # Dependencies are already installed via the project setup

      - name: Run Bandit security scan
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety vulnerability check
        run: safety check --output json || true

      - name: Run Privacy Scanner
        run: |
          python packages/security/privacy_scanner.py . --extensions .py --output privacy-scan-results.json || true
        continue-on-error: true

      - name: Check privacy scan results
        run: |
          if [ -f privacy-scan-results.json ]; then
            RISK_LEVEL=$(jq -r '.summary.risk_level' privacy-scan-results.json 2>/dev/null || echo "UNKNOWN")
            PII_COUNT=$(jq -r '.summary.total_pii_entities' privacy-scan-results.json 2>/dev/null || echo "0")

            echo "üîç Privacy Scan Results:"
            echo "   Risk Level: $RISK_LEVEL"
            echo "   PII Entities Found: $PII_COUNT"

            if [ "$RISK_LEVEL" = "HIGH" ]; then
              echo "‚ùå HIGH privacy risk detected. Review privacy scan results."
              exit 1
            elif [ "$RISK_LEVEL" = "MEDIUM" ]; then
              echo "‚ö†Ô∏è  MEDIUM privacy risk detected. Consider reviewing findings."
            else
              echo "‚úÖ Privacy scan completed successfully."
            fi
          else
            echo "‚ö†Ô∏è  Privacy scan did not generate results file"
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            privacy-scan-results.json

  # Build and package check
  build:
    runs-on: ubuntu-latest
    needs: [pre-commit, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build package
        run: |
          poetry build

      - name: Check package
        run: |
          poetry check
          pip install dist/*.whl --force-reinstall
          python -c "import minicon; print('Package import successful')"

  block-merge:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check for critical issues
        run: |
          CRITICAL_COUNT=$(gh issue list --label critical --state open --json number -q 'length' || echo "0")
          if (( CRITICAL_COUNT > 0 )); then
            echo "‚ùå ${CRITICAL_COUNT} critical issues remain open. Cannot merge."
            exit 1
          fi
          echo "‚úÖ No critical issues blocking merge"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-metrics:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary requests jq
          sudo apt-get update && sudo apt-get install -y libxml2-utils
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Run metrics update
        run: chmod +x scripts/update_metrics.sh && ./scripts/update_metrics.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install mkdocs
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
      - name: Build docs
        run: mkdocs build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
