name: ci

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    # Run metrics update daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install pre-commit
        run: python -m pip install --upgrade pip pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]
      - name: Run pytest with coverage
        run: |
          pip install coverage pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=term
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
      - name: Enforce coverage ≥90%
        run: |
          pip install coverage
          COVERAGE=$(coverage report | grep TOTAL | awk '{print int($4)}')
          if (( COVERAGE < 90 )); then
            echo "❌ Coverage ${COVERAGE}% is below required 90%."
            exit 1
          fi
          echo "✅ Coverage ${COVERAGE}% meets requirement"

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      - name: Build package
        run: python -m build
      - name: Install package
        run: pip install dist/*.whl --force-reinstall

  block-merge:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check for critical issues
        run: |
          CRITICAL_COUNT=$(gh issue list --label critical --state open --json number -q 'length' || echo "0")
          if (( CRITICAL_COUNT > 0 )); then
            echo "❌ ${CRITICAL_COUNT} critical issues remain open. Cannot merge."
            exit 1
          fi
          echo "✅ No critical issues blocking merge"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-metrics:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary requests jq
          sudo apt-get update && sudo apt-get install -y libxml2-utils
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Run metrics update
        run: chmod +x scripts/update_metrics.sh && ./scripts/update_metrics.sh
        env:
          DB_CONN_STRING: ${{ secrets.DB_CONN_STRING }}
          MONITOR_AUTH_TOKEN: ${{ secrets.MONITOR_AUTH_TOKEN }}
          MONITOR_ENDPOINT_URL: ${{ secrets.MONITOR_ENDPOINT_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docs:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install mkdocs
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
      - name: Build docs
        run: mkdocs build
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
