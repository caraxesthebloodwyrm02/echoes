name: AI Advisor CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r mcp_requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx fastapi[all]
          pip install ruff black mypy bandit safety
          pip install pymarkdownlnt

      - name: Lint with ruff
        run: |
          # Stop build if there are Python syntax errors
          ruff check app packages automation --select=E9,F63,F7,F82 --show-files --statistics
          # Additional linting
          ruff check app packages automation --exit-zero --statistics

      - name: Format check with black
        run: |
          black --check app packages automation tests

      - name: Type check with mypy
        continue-on-error: true
        run: |
          mypy app automation --ignore-missing-imports

      - name: Lint markdown files
        run: |
          pymarkdown scan "**/*.md"

      - name: Security scan with bandit
        run: |
          bandit -r app packages automation -ll -i

      - name: Check for vulnerable dependencies
        continue-on-error: true
        run: |
          pip install safety
          safety check --json

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=app --cov=packages --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Run async tests
        run: |
          pytest tests/test_async.py -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Check for vulnerable dependencies
        continue-on-error: true
        run: |
          pip install -r requirements.txt
          safety check --json

      - name: Run Bandit security scanner
        run: |
          bandit -r app packages automation -f json -o bandit-report.json -ll

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  compliance:
    name: Compliance Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx

      - name: Check provenance enforcement
        run: |
          python -c "
          from app.core.validation.provenance_enforcer import ProvenanceEnforcerMiddleware
          print('✅ Provenance enforcer imports successfully')
          "

      - name: Verify safety schemas exist
        run: |
          python -c "
          from app.api.schemas import Provenance, Assertion, HILFeedback, AgentExecutionRequest
          print('✅ All safety schemas validated')
          "

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify documentation exists
        run: |
          test -f docs/DOMAIN_EXPANSION_PLAN.md || exit 1
          test -f README.md || exit 1
          echo "✅ Documentation files present"

  mcp-test:
    name: Test MCP Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install MCP dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r mcp_requirements.txt

      - name: Start MCP server in background
        run: |
          python mcp_server.py &
          SERVER_PID=$!
          sleep 5

      - name: Test MCP health endpoint
        run: |
          curl -f http://127.0.0.1:8081/health

      - name: Test MCP echo tool
        run: |
          response=$(curl -s -X POST http://127.0.0.1:8081/tools/echo -H "Content-Type: application/json" -d '{"text":"hello","repeat":3}')
          echo "$response"
          echo "$response" | grep -q '"echoed":"hello hello hello"' && echo "✅ Echo tool works"

      - name: Stop server
        run: |
          kill $SERVER_PID || true

  pre-commit:
    name: Run Pre-commit Hooks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit
        run: |
          pre-commit run --all-files
