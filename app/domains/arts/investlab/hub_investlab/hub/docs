# üîê Authentication Hub Setup Guide

## Overview
This authentication system provides web-based OAuth2 login for Google, Microsoft, and X (Twitter) to enable personalized data fetching.

## üöÄ Quick Start

### 1. Install Dependencies
```bash
pip install flask flask-cors python-dotenv
```

### 2. Configure OAuth Applications

#### Google OAuth2
1. Go to [Google Cloud Console](https://console.cloud.google.com)
2. Create a new project or select existing
3. Enable Google+ API
4. Create OAuth 2.0 credentials
5. Add authorized redirect URI: `http://localhost:5001/callback/google`

#### Microsoft OAuth2
1. Go to [Azure Portal](https://portal.azure.com)
2. Register new application in Azure AD
3. Add redirect URI: `http://localhost:5001/callback/microsoft`
4. Note Application (client) ID and client secret

#### Twitter/X OAuth2
1. Go to [Twitter Developer Portal](https://developer.twitter.com)
2. Create new app
3. Set callback URL: `http://localhost:5001/callback/twitter`
4. Generate client ID and secret

### 3. Setup Environment

Create `.env` file:
```bash
# Flask Configuration
SECRET_KEY=your-secret-key-here

# Google OAuth2
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret

# Microsoft OAuth2
MICROSOFT_CLIENT_ID=your_microsoft_client_id
MICROSOFT_CLIENT_SECRET=your_microsoft_client_secret

# Twitter/X OAuth2
TWITTER_CLIENT_ID=your_twitter_client_id
TWITTER_CLIENT_SECRET=your_twitter_client_secret

# Web App Settings
PORT=5001
DEBUG=False
```

### 4. Run the Authentication Hub
```bash
python auth_hub.py
```

## üåê Web Interface

### URLs
- **Main Login**: `http://localhost:5001/`
- **Dashboard**: `http://localhost:5001/dashboard`
- **Logout**: `http://localhost:5001/logout`

### Features
- ‚úÖ **Multi-provider OAuth2** (Google, Microsoft, X)
- ‚úÖ **Secure session management**
- ‚úÖ **User profile storage**
- ‚úÖ **Personalized data access**
- ‚úÖ **Token refresh handling**
- ‚úÖ **Responsive web interface**

## üìÅ File Structure
```
auth/
‚îú‚îÄ‚îÄ oauth_manager.py    # OAuth2 handling
‚îú‚îÄ‚îÄ user_manager.py     # User profile management
‚îú‚îÄ‚îÄ web_app.py         # Flask web interface
auth_hub.py            # Main authentication app
```

## üîß Configuration

### Required Environment Variables
- `SECRET_KEY`: Flask secret key
- `GOOGLE_CLIENT_ID`: Google OAuth client ID
- `GOOGLE_CLIENT_SECRET`: Google OAuth client secret
- `MICROSOFT_CLIENT_ID`: Microsoft OAuth client ID
- `MICROSOFT_CLIENT_SECRET`: Microsoft OAuth client secret
- `TWITTER_CLIENT_ID`: Twitter OAuth client ID
- `TWITTER_CLIENT_SECRET`: Twitter OAuth client secret

### Optional
- `PORT`: Web server port (default: 5001)
- `DEBUG`: Debug mode (default: False)

## üéØ Usage Examples

### After Login
- Access personalized Microsoft data
- View Google Cloud resources
- Monitor Twitter/X activity
- Customize notification preferences

### Data Storage
- User profiles: `data/users/`
- Authentication tokens: `data/profiles/`
- Session data: Flask sessions

## üîê Security Features

- **State parameter validation** for CSRF protection
- **Secure token storage** (never exposed to client)
- **Session management** with timeout
- **HTTPS redirect URIs** (configure for production)
- **Token refresh** handling

## üêõ Troubleshooting

### Common Issues
1. **"OAuth not configured"**: Check .env file
2. **Redirect URI mismatch**: Update OAuth app settings
3. **Token expired**: Refresh tokens automatically handled
4. **Permission denied**: Check OAuth app permissions

### Debug Mode
```bash
DEBUG=True python auth_hub.py
```

## üìä Next Steps

1. **Production deployment**: Use HTTPS and proper domain
2. **Database integration**: Replace file storage with database
3. **Advanced personalization**: Use user preferences for data filtering
4. **Real-time notifications**: Add webhook support
5. **Multi-user dashboard**: Add admin interface

## üéâ Ready to Use!

The authentication system is now ready. Configure your OAuth credentials and start using personalized data fetching from all three ecosystems!
